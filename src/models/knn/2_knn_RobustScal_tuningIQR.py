"""@author: marcosesquivelgonzalezVistos los buenos resultados del RobustScaler, se corrobora la presencia de outliers como se vio en el EDA(para las variables numéricas). En este script si intenta ajustar la 'distancia intercuartil' utilizadapor el RobustScaler para escalar los datos. Para ello, se realiza también validación cruzada con 10 folds."""import osimport sysMODELS = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))SRC = os.path.abspath(os.path.join(MODELS, os.pardir))sys.path.append(SRC)import utilsimport numpy as npimport pandas as pdfrom sklearn.neighbors import KNeighborsClassifierfrom sklearn.model_selection import cross_validatefrom sklearn.model_selection import GridSearchCVfrom sklearn.preprocessing import RobustScalerfrom sklearn.preprocessing import OneHotEncodertrain_raw = utils.load_train()train_X = utils.one_hot_encode(df = train_raw.drop(["Transported", "PassengerId"], axis = 1))train_y = train_raw.Transported#----------------------------BASTANTE MÁS RÁPIDO ASÍ:(?)-------------------------colnames = train_X.columnsfor (low,high) in zip(np.arange(10,30,1),np.arange(90,70,-1)):        print('Para low =',low,', high =',high)    print('scoreCV, k, p')        RobScal = RobustScaler(quantile_range=(low,high))    df_array = RobScal.fit_transform(train_X)    train_X_scaled = pd.DataFrame(df_array,columns=colnames)    for p_ in [1,2]:        optim_score = 0.        for i in range(5,50):            score_cv = cross_validate(estimator = KNeighborsClassifier(n_neighbors=i, p = p_),                                      X = train_X_scaled, y = train_y, cv = 10, n_jobs = -1)            score_test = np.mean(score_cv["test_score"])            if score_test > optim_score:                optim_score = score_test                k_optim = i                p_optim = p_               print('%.4f %.d %.d'%(optim_score,k_optim,p_optim))"""RobScal = RobustScaler(quantile_range=(22.0,78.0))df_array = RobScal.fit_transform(train_X)train_X_scaled = pd.DataFrame(df_array,columns=colnames)#Predicciones en el testtest_raw = utils.load_test()test = utils.one_hot_encode(df = test_raw.drop(["PassengerId"], axis = 1))colnames = test.columnstest_scaled_array = RobScal.transform(test)test_scaled = pd.DataFrame(test_scaled_array,columns=colnames)knn = KNeighborsClassifier(n_neighbors = k_optim ,p = p_optim).fit(train_X_scaled,train_y)pred_labels = knn.predict(X = test_scaled)predicted_labels = utils.encode_labels(pred_labels)utils.generate_submission(labels = predicted_labels, method = "knn", notes = "RobScal(iqr(22,78))_k_" + str(k_optim) + "_and_p_" + str(p_optim))"""