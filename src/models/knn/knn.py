import osimport sysMODELS = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))SRC = os.path.abspath(os.path.join(MODELS, os.pardir))sys.path.append(SRC)import utilsimport numpy as npimport pandas as pdfrom sklearn.neighbors import KNeighborsClassifierfrom sklearn.model_selection import cross_validatefrom sklearn.model_selection import GridSearchCVfrom sklearn.preprocessing import RobustScalerfrom sklearn.preprocessing import OneHotEncodertrain_raw = utils.load_train()train_X = utils.one_hot_encode(df = train_raw.drop(["Transported", "PassengerId"], axis = 1))train_y = train_raw.Transportedweights = ["uniform", "distance"]"""knn = KNeighborsClassifier()k_range = list(range(1,100))pgrid = dict(n_neighbors=k_range,p=[1,2])grid = GridSearchCV(knn, pgrid, scoring='accuracy', n_jobs = -1, cv =10, return_train_score=True)grid_search = grid.fit(train_X_scaled,train_y)print(grid_search.best_params_)"""#----------------------------BASTANTE MÁS RÁPIDO ASÍ:(?)-------------------------colnames = train_X.columnsoptim_score = 0.for (low,high) in zip(np.arange(20,40,1),np.arange(80,60,-1)):    for p_ in [1,2]:        for i in range(5,50):            RobScal = RobustScaler(quantile_range=(low,high))            df_array = RobScal.fit_transform(train_X)            train_X_scaled = pd.DataFrame(df_array,columns=colnames)                        score_cv = cross_validate(estimator = KNeighborsClassifier(n_neighbors=i, p = p_),                                      X = train_X_scaled, y = train_y, cv = 10, n_jobs = -1)            print(round(np.mean(score_cv["test_score"]),5))            score_test = np.mean(score_cv["test_score"])            if score_test > optim_score:                optim_score = score_test                k_optim = i                p_optim = p_                low_optim = low                high_optim = high#                w_optim = wprint('Mejor resultado:',optim_score,'\n Para k=',k_optim,' y p= ',p_optim)#Predicciones en el testtest_raw = utils.load_test()test = utils.one_hot_encode(df = test_raw.drop(["PassengerId"], axis = 1))colnames = test.columnstest_scaled_array = RobScal.transform(test)test_scaled = pd.DataFrame(test_scaled_array,columns=colnames)knn = KNeighborsClassifier(n_neighbors = k_optim ,p = p_optim).fit(train_X_scaled,train_y)pred_labels = knn.predict(X = test_scaled)predicted_labels = utils.encode_labels(pred_labels)#utils.generate_submission(labels = predicted_labels, method = "knn", notes = "RobScal_k_" + str(k_optim) + "_and_p_" + str(p_optim))