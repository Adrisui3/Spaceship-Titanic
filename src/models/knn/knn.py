import osimport sysMODELS = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))SRC = os.path.abspath(os.path.join(MODELS, os.pardir))sys.path.append(SRC)import utilsimport numpy as npimport pandas as pdfrom sklearn.neighbors import KNeighborsClassifierfrom sklearn.model_selection import cross_validatefrom sklearn.model_selection import GridSearchCV as GS_CVfrom sklearn.preprocessing import StandardScalerfrom sklearn.preprocessing import OneHotEncodertrain_raw = utils.load_train()train_X = utils.one_hot_encode(df = train_raw.drop(["Transported", "PassengerId"], axis = 1))train_y = train_raw.TransportedSSc = StandardScaler()colnames = train_X.columnsdf_array = SSc.fit_transform(train_X)train_X_scaled = pd.DataFrame(df_array,columns=colnames)knn = KNeighborsClassifier()k_range = [n for n in range(1,100)]pgrid = dict(n_neighbors=k_range,p=[1,2])grid = GS_CV(knn, pgrid, scoring='accuracy', n_jobs = -1, cv =10, return_train_score=True)grid_search = grid.fit(train_X,train_y)print(grid_search.best_params_)#----------------------------BASTANTE MÁS RÁPIDO ASÍ:(?)-------------------------optim_score = 0.for p_ in [1,2]:    for i in range(1,100):        score_cv = cross_validate(estimator = KNeighborsClassifier(n_neighbors=i, p = p_), X = train_X_scaled, y = train_y, cv = 10, n_jobs = -1)        print(np.mean(score_cv["test_score"]))        score_test = np.mean(score_cv["test_score"])        if score_test > optim_score:            optim_score = score_test            k_optim = i            p_optim = p_    print('Mejor resultado:',optim_score,'\n Para k=',k_optim,' y p= ',p_optim)"""#Predicciones en el testtest_raw = utils.load_test()test = utils.one_hot_encode(df = test_raw.drop(["PassengerId"], axis = 1))knn = KNeighborsClassifier(n_neighbors = 33 ,p = 1).fit(train_X,train_y)pred_labels = knn.predict(X = test)#utils.generate_submission(labels = pred_labels, method = "knn", notes = "k_" + str(k_optim) + "_and_p_" + str(p_optim))"""